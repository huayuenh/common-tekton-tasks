---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: containerize-check-va-scan
  labels:
    app.kubernetes.io/version: 1.0.0
    tekton.dev/deprecated: true
spec:
  params:
    - name: ibmcloud-api
      description: The IBM Cloud API endpoint.
      default: https://cloud.ibm.com
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: image-url
      description: "url of the image to VA scan - required if no image pipeline resource provided to this task"
      default: ""
    - name: image-digest
      description: "SHA id of the image to VA scan - required if no image pipeline resource provided to this task"
      default: ""
    - name: image-properties-file
      description: file containing properties of the image to be scanned
      default: "build.properties"
    - name: max-iteration
      description: maximum number of iterations allowed while loop to check for va report
      default: "30"
    - name: sleep-time
      description: sleep time (in seconds) between invocation of ibmcloud cr va in the loop
      default: "10"
    - name: scan-report-file
      description: filename for the scan report (json format) of the given image. It will be copied to the workspace
      default: ''
    - name: fail-on-scanned-issues
      description: >
        flag (`true` | `false`) to indicate if the task should fail or
        continue if issues are found in the image scan result
      default: "true"
    - name: continuous-delivery-context-secret
      description: The name of the k8s `Secret` which contains the IBM Cloud API Key.
      default: "secure-properties"
    - name: ibmcloud-api-key-secret-key
      description: The key in `continuous-delivery-context-secret` which contains the IBM Cloud API Key.
      default: "ibmcloud-api-key"
    - name: retry-count
      description: retry count to try ibmcloud commands
      default: "5"
    - name: retry-delay
      description: the amount of seconds between the retries
      default: "10"
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: break-glass-name
      description: Name of the `ConfigMap` that holds Break-Glass mode settings
      default: environment-properties
    - name: break-glass-key
      description: Key in the `break-glass-name` `ConfigMap` that holds the Break-Glass mode settings
      default: break_glass

  results:
    - name: scan-report-file
      description: the filename if the scan report for the image stored in the workspace
    - name: scan-status
      description: |
        the status from Vulnerability Advisor - possible values: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED

  steps:
    - name: run-vulnerability-advisor-scan
      image: ibmcom/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
      workingDir: /artifacts
      env:
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
        - name: BREAK_GLASS
          valueFrom:
            configMapKeyRef:
              name: $(params.break-glass-name)
              key: $(params.break-glass-key)
              optional: true
      script: |
        #!/usr/bin/env bash
        set -e -o pipefail

        if [[ "$PIPELINE_DEBUG" == 1 ]]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        if [[ -n "$BREAK_GLASS" ]]; then
          echo "Break-Glass mode is on, skipping the rest of the task..."
          echo -n "$(params.scan-report-file)" > $(results.scan-report-file.path)
          echo -n "UNSCANNED" > $(results.scan-status.path)
          exit 0
        fi

        IBMCLOUD_API_KEY=$(cat "/secrets/$(params.ibmcloud-api-key-secret-key)")

        TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
        TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
        INPUT_IMAGE_URL=$(echo "$(params.image-url)" |  awk -F: '{print $1}')

        # Parse the image input to find information (region, namespace, image name, tag & digest/sha)
        INPUT_REGISTRY_URL=$(echo $INPUT_IMAGE_URL |  awk -F/ '{print $1}')
        INPUT_REGISTRY_NAMESPACE=$(echo $INPUT_IMAGE_URL |  awk -F/ '{print $2}')
        INPUT_IMAGE_NAME=$(echo $INPUT_IMAGE_URL |  awk -F/ '{print $3}')
        INPUT_IMAGE_TAG=$(echo $INPUT_IMAGE_URL |  awk -F: '{print $2}')
        INPUT_IMAGE_DIGEST=$(params.image-digest)

        # Find the ibmcloud container registry region
        # https://cloud.ibm.com/docs/services/Registry?topic=registry-registry_overview#registry_regions_local
        if [[ $INPUT_REGISTRY_URL =~ ^registry\.[a-z]*.bluemix.net$ ]]; then
          # deprecated domain name
          REGISTRY_REGION=$(echo $INPUT_REGISTRY_URL | awk -F. '{print $2}')
          if [ "$REGISTRY_REGION" == "ng" ]; then
            REGISTRY_REGION="us-south"
          fi
        else
          export REGISTRY_REGION=$(echo $INPUT_REGISTRY_URL | awk -F. '{print $1}')
          if [ "$REGISTRY_REGION" == "jp" ]; then
            REGISTRY_REGION="ap-north"
          elif [ "$REGISTRY_REGION" == "au" ]; then
            REGISTRY_REGION="ap-south"
          elif [ "$REGISTRY_REGION" == "de" ]; then
            REGISTRY_REGION="eu-central"
          elif [ "$REGISTRY_REGION" == "uk" ]; then
            REGISTRY_REGION="uk-south"
          elif [ "$REGISTRY_REGION" == "us" ]; then
            REGISTRY_REGION="us-south"
          elif [ "$REGISTRY_REGION" == "stg" ]; then
            REGISTRY_REGION="us-south"
          else
            echo "No IBM Cloud Container Registry region found for the registry url $INPUT_REGISTRY_URL"
            exit 1
          fi
        fi

        source /scripts/retry_command.sh

        # ibmcloud login

        ibmcloud_login() {
          ibmcloud config --check-version false
          ibmcloud login -a $(params.ibmcloud-api) -r $TOOLCHAIN_REGION --apikey $IBMCLOUD_API_KEY
          if [ "$(params.resource-group)" ]; then
            ibmcloud target -g $(params.resource-group)
          fi
        }

        retry $(params.retry-count) $(params.retry-delay) ibmcloud_login

        exit_code=$?

        if [ $exit_code -ne 0 ]; then
          echo "Error during the ibmcloud login. There might be an ibmcloud outage."
        fi

        # Log container registry to the appropriate region

        ibmcloud_region_set() {
          ibmcloud cr region-set $REGISTRY_REGION
          ibmcloud cr info
        }

        retry $(params.retry-count) $(params.retry-delay) ibmcloud_region_set

        exit_code=$?

        if [ $exit_code -ne 0 ]; then
          echo "Error during the region set. There might be an ibmcloud outage."
        fi

        # Because of https://github.com/tektoncd/pipeline/issues/216 the image digest for input is probably empty
        # If image digest is empty, then use the imageProperties file to obtain the information
        if [ -z "$INPUT_IMAGE_DIGEST" ]; then
          if [ -z "$(params.image-properties-file)" ]; then
            echo "No digest found - use only the image url"
            PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL"
          else
            # Look for the digest in the image-properties-file
            echo "Search for digest in the $(params.image-properties-file)"
            source $(params.image-properties-file)
            PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$IMAGE_MANIFEST_SHA"
          fi
        else
          PIPELINE_IMAGE_URL="$INPUT_IMAGE_URL@$INPUT_IMAGE_DIGEST"
        fi

        # inspect the image to ensure it exists

        ibmcloud_image_inspect() {
          echo -e "Details for image: ${PIPELINE_IMAGE_URL}"
          ibmcloud cr image-inspect ${PIPELINE_IMAGE_URL}
        }

        retry $(params.retry-count) $(params.retry-delay) ibmcloud_image_inspect

        exit_code=$?

        if [ $exit_code -ne 0 ]; then
          echo "Error during image inspect. There might be an ibmcloud outage."
        fi

        # Loop until the scan has been performed
        echo -e "Checking vulnerabilities in image: ${PIPELINE_IMAGE_URL}"
        for ITER in {1..$(params.max-iteration)}
        do
          set +e
          STATUS=""
          ibmcloud cr va -o json ${PIPELINE_IMAGE_URL} > /steps/vareport.json
          # ibmcloud cr va returns a non valid json output if image not yet scanned
          if jq -r -e '.[0].status' /steps/vareport.json > /dev/null 2>&1; then
            STATUS=$( jq -r '.[0].status' /steps/vareport.json)
          fi
          if [ -z "$STATUS" ]; then
            STATUS="UNSCANNED"
            cat /steps/vareport.json
          fi
          set -e

          echo "VA scan status is ${STATUS}"
          # Possible status from Vulnerability Advisor: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED
          # cf https://cloud.ibm.com/apidocs/container-registry/va#get-the-vulnerability-assessment-for-the-list-of-r
          if [[ "${STATUS}" != "INCOMPLETE" && "${STATUS}" != "UNSCANNED" ]]; then
            # status is one of the terminated scan action - break the loop
            break
          fi
          echo -e "${ITER} STATUS ${STATUS} : A vulnerability report was not found for the specified image."
          echo "Either the image doesn't exist or the scan hasn't completed yet. "
          echo "Waiting $(params.sleep-time)s for scan to complete..."
          sleep $(params.sleep-time)
        done
        set +e
        echo "Showing extended vulnerability assessment report for ${PIPELINE_IMAGE_URL}"
        ibmcloud cr va -e ${PIPELINE_IMAGE_URL} || true
        set -e

        if [ "$(params.scan-report-file)" ]; then
          echo "Copy Vulnerability Advisor scan report (JSON format) to /artifacts/$(params.scan-report-file)"
          cp /steps/vareport.json /artifacts/$(params.scan-report-file)
        fi

        # Record task results
        echo -n "$(params.scan-report-file)" > $(results.scan-report-file.path)
        echo -n "${STATUS}" > $(results.scan-status.path)

        if [[ "${STATUS}" == "OK" ]] || [[ "${STATUS}" == "UNSUPPORTED" ]] || [[ "${STATUS}" == "WARN" ]]; then
          echo "The vulnerability scan status is ${STATUS}"
        else
          echo "ERROR: The vulnerability scan was not successful (status being ${STATUS}), \
          check the OUTPUT of the command and try again."
          if [ "$(params.fail-on-scanned-issues)" == "true" ]; then
            exit 1;
          fi
        fi

      volumeMounts:
        - name: cd-config-volume
          mountPath: /cd-config
        - name: steps-volume
          mountPath: /steps
        - name: secrets
          mountPath: /secrets
        - mountPath: /scripts
          name: retry-command

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: steps-volume
      emptyDir: {}
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: retry-command
      configMap:
        name: retry-command
        items:
          - key: retry_command.sh
            path: retry_command.sh
