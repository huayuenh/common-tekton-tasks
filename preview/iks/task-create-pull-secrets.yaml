---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: iks-create-pull-secrets
spec:
  params:
    - name: cluster-name
      description: The IBM Cloud cluster name
    - name: cluster-region
      description: The IBM Cloud region for your cluster
    - name: cluster-namespace
      description: The IBM Cloud cluster namespace
      default: "default"
    - name: ibmcloud-api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: ibmcloud-api-key-secret-key
      description: the IBM Cloud API key from secrets
      default: "ibmcloud-api-key"
    - name: registry-url
      description: Container registry URL
      default: ""
    - name: image-url
      description: url of the image to VA scan - required if no image pipeline resource provided to this task
      default: ""
    - name: retry-count
      description: retry count to pull and push git evidence repo
      default: "5"
    - name: retry-delay
      description: the amount of seconds between the retries
      default: "20"

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: create-pull-secrets
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
      env:
        - name: API
          value: $(params.ibmcloud-api)
        - name: REGION
          value: $(params.cluster-region)
        - name: CLUSTER_NAMESPACE
          value: $(params.cluster-namespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster-name)
        - name: REGISTRY_URL
          value: $(params.registry-url)
        - name: IMAGE_URL
          value: $(params.image-url)

      command: ["/bin/bash", "-c"]
      # yamllint disable rule:line-length
      args:
        - |
          #!/bin/bash
          set -e -o pipefail

          if [ "$PIPELINE_DEBUG" == 1 ]; then
            env
            cat /cd-config/toolchain.json
            trap env EXIT
            set -x
          fi

          source /scripts/retry_command.sh

          PIPELINE_TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)
          IBMCLOUD_API_KEY=$(cat "/secrets/$(params.ibmcloud-api-key-secret-key)")
          export IBMCLOUD_API_KEY

          if [ -z "${REGISTRY_URL}" ]; then
            if [ -n "${IMAGE_URL}" ]; then
              REGISTRY_URL=$(echo $IMAGE_URL |  awk -F/ '{print $1}')
            else
              echo "REGISTRY_URL or IMAGE_URL is required parameter."
              exit 1
            fi
          fi

          ibmcloud_login() {
            ibmcloud login -a "$API" -r "$REGION"
            $(ibmcloud ks cluster config --cluster "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --export)
          }

          retry $(params.retry-count) $(params.retry-delay) ibmcloud_login

          exit_code=$?

          if [ $exit_code -ne 0 ]; then
            echo "Error logging in with IBMCLOUD_API_KEY"
            exit $exit_code
          fi

          echo -e "CONFIGURING ACCESS to private image registry from namespace ${CLUSTER_NAMESPACE}"
          IMAGE_PULL_SECRET_NAME="ibmcloud-toolchain-${PIPELINE_TOOLCHAIN_ID}-${REGISTRY_URL}"

          echo -e "Checking for presence of ${IMAGE_PULL_SECRET_NAME} imagePullSecret for this toolchain"

          if ! kubectl get secret "${IMAGE_PULL_SECRET_NAME}" --namespace "${CLUSTER_NAMESPACE}"; then
            echo -e "${IMAGE_PULL_SECRET_NAME} not found in ${CLUSTER_NAMESPACE}, creating it"
            # for Container Registry, docker username is 'token' and email does not matter
            create_namespace() {
              kubectl --namespace "${CLUSTER_NAMESPACE}" create secret docker-registry "${IMAGE_PULL_SECRET_NAME}" \
              --docker-server="${REGISTRY_URL}" \
              --docker-password="${IBMCLOUD_API_KEY}" \
              --docker-username=iamapikey \
              --docker-email=a@b.com
            }
            retry $(params.retry-count) $(params.retry-delay) create_namespace

            exit_code=$?

            if [ $exit_code -ne 0 ]; then
              echo "Error creating namespace $CLUSTER_NAMESPACE"
              exit $exit_code
            fi
          else
            echo -e "Namespace ${CLUSTER_NAMESPACE} already has an imagePullSecret for this toolchain."
          fi

          if [ -z "${KUBERNETES_SERVICE_ACCOUNT_NAME}" ]; then KUBERNETES_SERVICE_ACCOUNT_NAME="default" ; fi

          SERVICE_ACCOUNT=$(kubectl get serviceaccount ${KUBERNETES_SERVICE_ACCOUNT_NAME}  -o json --namespace "${CLUSTER_NAMESPACE}" )

          patch_serviceaccount() {
            if ! echo "${SERVICE_ACCOUNT}" | jq -e '. | has("imagePullSecrets")' > /dev/null ; then
              kubectl patch --namespace "${CLUSTER_NAMESPACE}" \
                  serviceaccount/${KUBERNETES_SERVICE_ACCOUNT_NAME} \
                  -p '{"imagePullSecrets":[{"name":"'"${IMAGE_PULL_SECRET_NAME}"'"}]}'
            else
              if echo "${SERVICE_ACCOUNT}" | jq -e '.imagePullSecrets[] | select(.name=="'"${IMAGE_PULL_SECRET_NAME}"'")' > /dev/null ; then
                echo -e "Pull secret already found in ${KUBERNETES_SERVICE_ACCOUNT_NAME} serviceAccount"
              else
                echo "Inserting toolchain pull secret into ${KUBERNETES_SERVICE_ACCOUNT_NAME} serviceAccount"
                kubectl patch --namespace "${CLUSTER_NAMESPACE}" \
                  serviceaccount/${KUBERNETES_SERVICE_ACCOUNT_NAME} \
                  --type='json' -p='[{"op":"add","path":"/imagePullSecrets/-","value":{"name": "'"${IMAGE_PULL_SECRET_NAME}"'"}}]'
              fi
            fi
          }

          retry $(params.retry-count) $(params.retry-delay) patch_serviceaccount

          exit_code=$?

          if [ $exit_code -ne 0 ]; then
              echo "Error patching serviceaccount $KUBERNETES_SERVICE_ACCOUNT_NAME"
              exit $exit_code
          fi

          echo "${KUBERNETES_SERVICE_ACCOUNT_NAME} serviceAccount:"
          kubectl get serviceaccount ${KUBERNETES_SERVICE_ACCOUNT_NAME} --namespace "${CLUSTER_NAMESPACE}" -o yaml
          echo -e "Namespace ${CLUSTER_NAMESPACE} authorizing with private image registry using patched ${KUBERNETES_SERVICE_ACCOUNT_NAME} serviceAccount"

      volumeMounts:
        - name: cd-config-volume
          mountPath: /cd-config
          # yamllint enable rule:line-length
        - name: secrets
          mountPath: /secrets
        - name: retry-command
          mountPath: /scripts

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: retry-command
      configMap:
        name: retry-command
        items:
          - key: retry_command.sh
            path: retry_command.sh
