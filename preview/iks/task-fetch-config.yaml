---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: iks-fetch-config
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: cluster-region
      description: (optional) the ibmcloud region hosting the cluster (if none is found it will default to the toolchain region)
      default: ""
    - name: cluster-name
      description: name of the cluster - required if no cluster pipeline resource provided to this task
      default: ""
    - name: kube-api-server-accessible
      description: |
        indicates if the kubeAPIServer is exposed which is not the case for IBM Cloud Public Shared Workers (Calico network policy).
        If 'true', the task is trying to update the Cluster Pipeline Resources definition with the appropriate informations
        When 'false', the fallback mechanism (copy file(s)) is used.
      default: "false"
    - name: cluster-pipeline-resources-directory-fallback
      description: directory in the workspace that will be used as a fallback mechanism to store the kubeconfig file
      default: .tekton-cluster-pipeline-resources
    - name: cluster-and-worker-nodes-json-export
      description: directory in the workspace that will be used to store the cluster and worker nodes export json files
      default: ""
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: retry-count
      description: retry count to pull and push git evidence repo
      default: "5"
    - name: retry-delay
      description: the amount of seconds between the retries
      default: "10"
    - name: ibmcloud-api-key-secret-key
      description: the IBM Cloud API key from secrets
      default: "ibmcloud-api-key"

  results:
    - name: cluster-name
      description: The cluster name
    - name: cluster-id
      description: The cluster identifier
    - name: resource-group-name
      description: The resource-group name that this cluster is part of
    - name: resource-group-id
      description: The resource-group identifier that this cluster is part of
    - name: region
      description: The region (ie us-south) where the cluster is located

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: setup
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
      workingDir: $(workspaces.cluster-configuration.path)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      command: ["/bin/bash", "-c"]
      # yamllint disable rule:line-length
      args:
        - |
          set -e -o pipefail
          ##########################################################################
          # Setting HOME explicitly to have ibmcloud plugins available
          # doing the export rather than env definition is a workaround
          # until https://github.com/tektoncd/pipeline/issues/1836 is fixed
          export HOME="/root"
          ##########################################################################

          if [ $PIPELINE_DEBUG == 1 ]; then
            env
            cat /cd-config/toolchain.json
            trap env EXIT
            set -x
          fi

          source /scripts/retry_command.sh

          API_KEY=$(cat /secrets/$(params.ibmcloud-api-key-secret-key))

          fetch_config() {
            ibmcloud config --check-version false
            if [ "$(params.cluster-region)" ]; then
              TARGET_REGION=$(params.cluster-region)
            else
              TARGET_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
            fi
            ibmcloud login -a $(params.ibmcloud-api) -r $TARGET_REGION --apikey $API_KEY
            if [ "$(params.resource-group)" ]; then
              ibmcloud target -g $(params.resource-group)
            fi
            export CLUSTER_NAME="$(params.cluster-name)"
            if ibmcloud ks cluster get --cluster $CLUSTER_NAME; then
              get_config_file() {
                KUBECONFIG_ANSWER=$(ibmcloud ks cluster config --cluster "$CLUSTER_NAME" --export -s)
                config_exit=$?
                KUBECONFIG_FILE=$(echo "$KUBECONFIG_ANSWER" | awk -F= '{print $2}')
              }
              retry "$(params.retry-count)" "$(params.retry-delay)" get_config_file

              if [ $config_exit -ne 0 ]; then
                echo "Cannot fetch the clusterconfig, please check the logs"
                exit $config_exit
              fi
            else
            echo "Cluster $CLUSTER_NAME not found. Accessible clusters are:"
              ibmcloud ks clusters
              exit 1
            fi

            # PipelineResource Cluster are managed appropriately as input resources
            # but not as output resources, attempting to update the PipelineResource Cluster
            # that has been given (using kubectl patch commands)
            # Verifying the access to pipeline resources
            updateClusterPipelineResource="false"
            if [ "$(params.kube-api-server-accessible)" == "true" ]; then
              if kubectl auth can-i get pipelineresources.tekton.dev > /dev/null 2>&1; then
                updateClusterPipelineResource="true"
              fi
            fi
            if [ "$updateClusterPipelineResource" == "true" ]; then
              # TODO Need to update the Cluster Pipeline Resource with this values
              # This can only be done when TriggerTemplate#resourcetemplates will accept
              # Role and Binding K8S resources definition
              echo "TODO - Processing $KUBECONFIG_FILE"
              K8S_USER_NAME=$(yq r $KUBECONFIG_FILE users[0].name)
              K8S_USER_TOKEN=$(yq r $KUBECONFIG_FILE users[0].user.auth-provider.config.id-token)
              K8S_CLUSTER_URL=$(yq r $KUBECONFIG_FILE clusters[0].cluster.server)
              CA_PEM_FILE="$(dirname $KUBECONFIG_FILE)/$(yq r $KUBECONFIG_FILE clusters[0].cluster.certificate-authority)"
              K8S_CLUSTER_CADATA=$(base64 -w0 $CA_PEM_FILE)
              echo "K8S_USER_NAME=$K8S_USER_NAME"
              #echo "K8S_USER_TOKEN=$K8S_USER_TOKEN"
              echo "K8S_CLUSTER_URL=$K8S_CLUSTER_URL"
              #echo "K8S_CLUSTER_CADATA=$K8S_CLUSTER_CADATA"
            else
              echo "Access to pipelineresources.tekton.dev is required to update Cluser Pipeline Resource accordingly"
              echo "Falling back to copy of $(basename $KUBECONFIG_FILE) to the pipeline run volume"
              mkdir -p /cluster-configuration/$(params.cluster-pipeline-resources-directory-fallback)/$CLUSTER_NAME
              cp $(dirname $KUBECONFIG_FILE)/$(yq r $KUBECONFIG_FILE clusters[0].cluster.certificate-authority) /cluster-configuration/$(params.cluster-pipeline-resources-directory-fallback)/$CLUSTER_NAME
              cp $KUBECONFIG_FILE /cluster-configuration/$(params.cluster-pipeline-resources-directory-fallback)/$CLUSTER_NAME/kubeconfig
              echo "Kubeconfig file(s) copied to /cluster-configuration/$(params.cluster-pipeline-resources-directory-fallback)/$CLUSTER_NAME"
            fi
            ibmcloud ks cluster get --cluster $CLUSTER_NAME --json > /steps/$CLUSTER_NAME.json

            if [ "$(params.cluster-and-worker-nodes-json-export)" ]; then
              mkdir -p $(workspaces.workspace.path)/$(params.cluster-and-worker-nodes-json-export)/$CLUSTER_NAME
              cp /steps/$CLUSTER_NAME.json $(workspaces.workspace.path)/$(params.cluster-and-worker-nodes-json-export)/$CLUSTER_NAME/$CLUSTER_NAME.json
              ibmcloud ks worker ls --cluster $CLUSTER_NAME --json > $(workspaces.workspace.path)/$(params.cluster-and-worker-nodes-json-export)/$CLUSTER_NAME/$CLUSTER_NAME-workers.json
            fi
          }

          retry $(params.retry-count) $(params.retry-delay) fetch_config

          exit_code=$?

          if [ $exit_code -ne 0 ]; then
            echo "Cannot fetch the clusterconfig, please check the logs"
            exit $exit_code
          fi

          # Record task results
          echo -n "$(cat /steps/$CLUSTER_NAME.json | jq -r '.name')" > $(results.cluster-name.path)
          echo -n "$(cat /steps/$CLUSTER_NAME.json | jq -r '.id')" > $(results.cluster-id.path)
          echo -n "$(cat /steps/$CLUSTER_NAME.json | jq -r '.resourceGroupName')" > $(results.resource-group-name.path)
          echo -n "$(cat /steps/$CLUSTER_NAME.json | jq -r '.resourceGroup')" > $(results.resource-group-id.path)
          echo -n "$(cat /steps/$CLUSTER_NAME.json | jq -r '.region')" > $(results.region.path)

      # yamllint enable rule:line-length

      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - name: secrets
          mountPath: /secrets
        - name: retry-command
          mountPath: /scripts

  workspaces:
    - name: cluster-configuration
      mountPath: /cluster-configuration

  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: retry-command
      configMap:
        name: retry-command
        items:
          - key: retry_command.sh
            path: retry_command.sh
