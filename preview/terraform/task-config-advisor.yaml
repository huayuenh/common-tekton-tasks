---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: terraform-config-advisor
spec:
  params:
    - name: repository
      type: string
      description: Input Github repository where terraform is found
    - name: revision
      type: string
      description: Input Github repository's revision
    - name: pr-number
      description: the number of the PR that triggered the pipeline run. If NA do not comment on PR.
      default: "NA"
    - name: commit-id
      type: string
      description: ID of the last commit related to the PR. If NA do not comment on PR.
      default: "NA"
    - name: silent
      type: string
      description: Silent mode to disable output git, except PR comments
      default: "0"
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
    - name: git-api-token-key
      description: The name of the secret in the workspace
      default: "git-token"
    - name: tf-dir
      description: The directory to find the main terraform file
      default: "."
    - name: policy-threshold
      description: The threshold to use for all aggregation polices
      default: "2"

  results:
    - name: status
      description: status of gitsecure terraform compliance task, possible value are-success|failure
    - name: evidence-store
      description: filepath to store terraform compliance task evidence
  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(inputs.params.pipeline-debug)
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
  steps:
    - name: terraform-compliance
      image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/gitsecure/terraform-compliance:0.1.1
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          if [[ $PIPELINE_DEBUG == 1 ]];
            then
              pwd
              env
              trap env EXIT
              set -x
              LOG_LEVEL="debug"
            else
              LOG_LEVEL="info"
          fi

          echo "Running terraform compliance task"
          GIT_TOKEN=$(cat "/artifacts/$(params.git-api-token-key)")
          REPOSITORY=$(params.repository)
          DIRECTORY_NAME=$(basename "${REPOSITORY##*/}" .git)
          CLONE_PATH="/artifacts/$DIRECTORY_NAME/"

          if [[ $PIPELINE_DEBUG == 1 ]];
            then
              ls $CLONE_PATH
          fi

          echo "Using the following aggregation threshold " $(params.policy-threshold)
          threshold=$(params.policy-threshold)
          sed -i -E "s/^max_(.*) =.*/max_\1 = ${threshold}/" /usr/policies/ibm/terraform-config.rego
          if [[ $PIPELINE_DEBUG == 1 ]];
            then
              cat /usr/policies/ibm/terraform-config.rego
          fi

          result="failure"
          node /usr/src/index.js --git_token $GIT_TOKEN --repository $(params.repository) --gitClonedDir $CLONE_PATH --INPUT_TF_DIR $(params.tf-dir) --revision $(params.revision) --commitid $(params.commit-id) --pipelinerunid $PIPELINE_RUN_ID --prnumber $(params.pr-number) --LOG_LEVEL $LOG_LEVEL --silent $(params.silent)
          if [ $? -eq 0 ]; then export result="success"; fi

          echo -n $result > "$(results.status.path)"
      volumeMounts:
        - name: secrets
          mountPath: /secrets
  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /dynamic-secrets
  volumes:
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
